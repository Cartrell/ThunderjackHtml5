
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * GamePlay.
 */
function GamePlay() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var GamePlay_proto = Object.create(Phaser.State.prototype);
GamePlay.prototype = GamePlay_proto;
GamePlay.prototype.constructor = GamePlay;

GamePlay.prototype.init = function () {
	
};

GamePlay.prototype.preload = function () {
	
};

GamePlay.prototype.create = function () {
	var _background = this.add.sprite(0.0, 0.0, 'intro1', 'background');
	
	var _discard_deck = new deck_prefab(this.game);
	_discard_deck.position.setTo(250.0, 30.0);
	
	var _deck = new deck_prefab(this.game);
	_deck.position.setTo(850.0, 30.0);
	
	var _cards_container = this.add.group();
	
	var _dealer = new dealer_prefab(this.game);
	_dealer.position.setTo(350.0, 0.0);
	
	var _top_right_player = new player_prefab(this.game);
	_top_right_player.position.setTo(670.0, 200.0);
	
	var _top_middle_player = new player_prefab(this.game);
	_top_middle_player.position.setTo(340.0, 200.0);
	
	var _top_left_player = new player_prefab(this.game);
	_top_left_player.position.setTo(10.0, 200.0);
	
	var _bottom_left_player = new player_prefab(this.game);
	_bottom_left_player.position.setTo(10.0, 420.0);
	
	var _bottom_middle_player = new player_prefab(this.game);
	_bottom_middle_player.position.setTo(340.0, 420.0);
	
	var _bottom_right_player = new player_prefab(this.game);
	_bottom_right_player.position.setTo(670.0, 420.0);
	
	var _bet_chips = new bet_chips_prefab(this.game);
	_bet_chips.position.setTo(360.0, 680.0);
	
	var _hand_buttons = this.add.group();
	
	var _hand_button_1 = new hand_button_1_prefab(this.game, _hand_buttons);
	_hand_button_1.position.setTo(80.0, 690.0);
	
	var _hand_button_2 = new hand_button_2_prefab(this.game, _hand_buttons);
	_hand_button_2.position.setTo(160.0, 690.0);
	
	var _hand_button_3 = new hand_button_3_prefab(this.game, _hand_buttons);
	_hand_button_3.position.setTo(240.0, 690.0);
	
	var _bet_buttons = this.add.group();
	
	var _bet_button = this.add.button(680.0, 700.0, 'ui1', this._onBetButtonPressed, this, 'game_button_bet_norm', 'game_button_bet_norm', 'game_button_bet_down', 'game_button_bet_norm', _bet_buttons);
	_bet_button.scale.setTo(0.75, 0.75);
	
	var _clear_button = this.add.button(850.0, 700.0, 'ui1', this._onClearButtonPressed, this, 'game_button_clear_norm', 'game_button_clear_norm', 'game_button_clear_down', 'game_button_clear_norm', _bet_buttons);
	_clear_button.scale.setTo(0.75, 0.75);
	
	var _game_buttons = this.add.group();
	_game_buttons.scale.setTo(0.9, 0.9);
	
	var _game_button_surrender = this.add.button(20.0, 780.0, 'ui1', this._onSurrenderButtonPressed, this, 'game_button_surrender_norm', 'game_button_surrender_norm', 'game_button_surrender_down', 'game_button_surrender_norm', _game_buttons);
	
	var _game_button_double = this.add.button(240.0, 780.0, 'ui1', this._onDoubleButtonPressed, this, 'game_button_double_norm', 'game_button_double_norm', 'game_button_double_down', 'game_button_double_norm', _game_buttons);
	
	var _game_button_hit = this.add.button(460.0, 780.0, 'ui1', this._onHitButtonPressed, this, 'game_button_hit_norm', 'game_button_hit_norm', 'game_button_hit_down', 'game_button_hit_norm', _game_buttons);
	
	var _game_button_stand = this.add.button(680.0, 780.0, 'ui1', this._onStandButtonPressed, this, 'game_button_stand_norm', 'game_button_stand_norm', 'game_button_stand_down', 'game_button_stand_norm', _game_buttons);
	
	var _game_button_split = this.add.button(900.0, 780.0, 'ui1', this._onSplitButtonPressed, this, 'game_button_split_norm', 'game_button_split_norm', 'game_button_split_down', 'game_button_split_norm', _game_buttons);
	
	var _youWonTextNode = this.add.sprite(10.0, 90.0, 'ui1', 'node');
	_youWonTextNode.scale.setTo(6.5, 0.8);
	_youWonTextNode.data = {
	  text: "",
	  font: Thunderjack.DesignData.FONT_THE_BOLD_FONT_WIN
	};
	
	var _betTextNode = this.add.sprite(10.0, 50.0, 'ui1', 'node');
	_betTextNode.scale.setTo(6.5, 0.8);
	_betTextNode.data = {
	  text: "",
	  font: Thunderjack.DesignData.FONT_THE_BOLD_FONT
	};
	
	var _creditsTextNode = this.add.sprite(10.0, 10.0, 'ui1', 'node');
	_creditsTextNode.scale.setTo(6.5, 0.8);
	_creditsTextNode.data = {
	  text: "",
	  font: Thunderjack.DesignData.FONT_THE_BOLD_FONT
	};
	
	var _thunderbolts = this.add.group();
	
	var _thunderboltRight = this.add.sprite(760.0, 0.0, 'ui1', 'thunderbolt', _thunderbolts);
	
	var _thunderboltMiddle = this.add.sprite(430.0, 0.0, 'ui1', 'thunderbolt', _thunderbolts);
	
	var _thunderboltLeft = this.add.sprite(100.0, 0.0, 'ui1', 'thunderbolt', _thunderbolts);
	
	
	
	// fields
	
	this.fBackground = _background;
	this.fDiscard_deck = _discard_deck;
	this.fDeck = _deck;
	this.fCards_container = _cards_container;
	this.fDealer = _dealer;
	this.fTop_right_player = _top_right_player;
	this.fTop_middle_player = _top_middle_player;
	this.fTop_left_player = _top_left_player;
	this.fBottom_left_player = _bottom_left_player;
	this.fBottom_middle_player = _bottom_middle_player;
	this.fBottom_right_player = _bottom_right_player;
	this.fBet_chips = _bet_chips;
	this.fHand_buttons = _hand_buttons;
	this.fHand_button_1 = _hand_button_1;
	this.fHand_button_2 = _hand_button_2;
	this.fHand_button_3 = _hand_button_3;
	this.fBet_buttons = _bet_buttons;
	this.fBet_button = _bet_button;
	this.fClear_button = _clear_button;
	this.fGame_buttons = _game_buttons;
	this.fGame_button_surrender = _game_button_surrender;
	this.fGame_button_double = _game_button_double;
	this.fGame_button_hit = _game_button_hit;
	this.fGame_button_stand = _game_button_stand;
	this.fGame_button_split = _game_button_split;
	this.fYouWonTextNode = _youWonTextNode;
	this.fBetTextNode = _betTextNode;
	this.fCreditsTextNode = _creditsTextNode;
	this.fThunderbolts = _thunderbolts;
	this.fThunderboltRight = _thunderboltRight;
	this.fThunderboltMiddle = _thunderboltMiddle;
	this.fThunderboltLeft = _thunderboltLeft;
	
	// user code
	
	this._init();
	
};

/* --- end generated code --- */
// -- user code here --

//===========================================================================================
//"public"
//===========================================================================================

//-------------------------------------------------------------------------------------------
//getDeckData
//-------------------------------------------------------------------------------------------
GamePlay.prototype.getDeckData = function() {
  return(this._deckData);
};

//-------------------------------------------------------------------------------------------
//getDiscardDeckData
//-------------------------------------------------------------------------------------------
GamePlay.prototype.getDiscardDeckData = function() {
  return(this._discardDeckData);
};

//-------------------------------------------------------------------------------------------
//getPlayerOrDealerHand
//-------------------------------------------------------------------------------------------
GamePlay.prototype.getPlayerOrDealerHand = function(s_playerHandId) {
  return(this._isDealerId(s_playerHandId) ?
    this._dealerData :
    this._playerData.getHandData(s_playerHandId));
};

//-------------------------------------------------------------------------------------------
//getPlayerOrDealerHandUi
//-------------------------------------------------------------------------------------------
GamePlay.prototype.getPlayerOrDealerHandUi = function(s_playerId) {
  return(this._isDealerId(s_playerId) ?
    this._gamePlayUi.dealerHand :
    this._gamePlayUi.playerHandsById[s_playerId]);
};

//-------------------------------------------------------------------------------------------
//getTotalNumCards
//-------------------------------------------------------------------------------------------
GamePlay.prototype.getTotalNumCards = function() {
  return(Thunderjack.DesignData.NUM_DECKS *
    Thunderjack.CardValues.ALL.length *
    Thunderjack.CardSuits.ALL.length);
};

//-------------------------------------------------------------------------------------------
//onBetChipPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype.onBetChipPressed = function(s_betKey) {
  var selectedHandsById = this._gamePlayUi.handButtons.selectedHands;
  for (var s_handId in selectedHandsById) {
    var s_playerId = Thunderjack.HandPlayerIdMaps.ToPlayer[s_handId];
    this._addBetChipToPlayerBet(s_playerId, s_betKey);
  }
  
  this._playSound("snd_bet_add");
};

//===========================================================================================
// "private"
//===========================================================================================

//-------------------------------------------------------------------------------------------
//_aceUpSleeve
//-------------------------------------------------------------------------------------------
GamePlay.prototype._aceUpSleeve = function() {
  var as_cardIds = Thunderjack.DebugData.CardIds;
  if (!as_cardIds || !as_cardIds.length) {
    return;
  }
  
  var s_cardId = as_cardIds.shift();
  var i_swapIndex = this._deckData.getLength();
  while (s_cardId) {
    this._deckData.swap(s_cardId, --i_swapIndex);
    s_cardId = as_cardIds.shift();
  }
};

//-------------------------------------------------------------------------------------------
//_addBetChipToPlayerBet
//-------------------------------------------------------------------------------------------
GamePlay.prototype._addBetChipToPlayerBet = function(s_playerId, s_betChipKey) {
  var i_betChipValue = Thunderjack.BetChipsData.Blocks[s_betChipKey].value;
  var IS_OFFSET = true;
  var i_playerBet = this._playerData.setBet(s_playerId, i_betChipValue, IS_OFFSET);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
  playerHandUi.setBetValue(i_playerBet);
  
  this._updateTotalBet();
  this._updateBetButton();
};

//-------------------------------------------------------------------------------------------
//_addTotalWonToCredits
//-------------------------------------------------------------------------------------------
GamePlay.prototype._addTotalWonToCredits = function() {
  var IS_OFFSET = true;
  this._setCredits(this._totalWon, IS_OFFSET);
  
  if (this._totalWonToDisplay > 0) {
    this._gamePlayUi.showAmountWon(this._totalWonToDisplay);
  }
};

//-------------------------------------------------------------------------------------------
//_advanceWinSoundIndex
//-------------------------------------------------------------------------------------------
GamePlay.prototype._advanceWinSoundIndex = function() {
  this._winSoundIndex = (this._winSoundIndex + 1) % Thunderjack.DesignData.WIN_SOUND_KEYS.length;
};

//-------------------------------------------------------------------------------------------
//_areAnyPlayersAvailableVsDealer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._areAnyPlayersAvailableVsDealer = function() {
  var a_playerHands = this._getActivePlayerHands();
  for (var i_index = 0; i_index < a_playerHands.length; i_index++) {
    var playerHandData = a_playerHands[i_index];
    if (this._isPlayingVsDealer(playerHandData)) {
      return(true);
    }
  }
  return(false);
};

//-------------------------------------------------------------------------------------------
//_beginDealerTurn
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginDealerTurn = function() {
  //technically, the dealer does not stand if there are no players to play against
  if (!this._areAnyPlayersAvailableVsDealer()) {
    this._setNextTurnPlayer();
    return;
  }
  
  if (this._shouldDealerRevealCard) {
    this._shouldDealerRevealCard = false;
    this._revealDealersSecondCard();
  }
  
  if (this._shouldDealerStand()) {
    this._beginTurnPlayerStand();
  } else {
    this._beginTurnPlayerHit();
  }
};

//-------------------------------------------------------------------------------------------
//_beginMoveCards
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginMoveCards = function(i_durationSecs, i_rateSecs) {
  this._gamePlayUi.setGameButtonsVisible(false);
  this._gamePlayUi.moveCards(i_durationSecs, i_rateSecs);  
};

//-------------------------------------------------------------------------------------------
//_beginPlayerTurn
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginPlayerTurn = function(s_playerId) {
  var playerHandData = this.getPlayerOrDealerHand(s_playerId);
  this._showGameButtonsForPlayer(playerHandData);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
  playerHandUi.setTurnIndicatorVisible(true);
};

//-------------------------------------------------------------------------------------------
//_beginRound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginRound = function() {
  this._gamePlayUi.setAllBetUisVisible(false);
  this._totalWon = 0;
  this._totalWonToDisplay = 0;
  this._playerIdOfThunderjack = null;
  this._shouldDealerRevealCard = true;
  this._dealOpeningCards();  
};

//-------------------------------------------------------------------------------------------
//_beginTurnPlayerDoubleDown
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginTurnPlayerDoubleDown = function() {
  this._setTurnPlayerDoubleDownStatus();
  this._payDoubleDownCostForTurnPlayer();
  this._dealDoubleDownCardToTurnPlayer();
  this._playSound("snd_double_down");
};

//-------------------------------------------------------------------------------------------
//_beginTurnPlayerHit
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginTurnPlayerHit = function() {
  this._gameState = Thunderjack.GameStates.HIT;
  var SHOULD_MOVE_CARDS = true;
  var IS_CARD_FACE_UP = true;
  this._dealCardTo(this._getTurnPlayerId(), SHOULD_MOVE_CARDS, IS_CARD_FACE_UP);
  this._playSound("snd_hit");
};

//-------------------------------------------------------------------------------------------
//_beginTurnPlayerSplit
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginTurnPlayerSplit = function() {
  this._gameState = Thunderjack.GameStates.SPLIT;
  
  var s_splitPlayerId = this._insertUpperPlayerIdIntoTurnPlayerIds();
  this._setSplitStatusForPlayers(s_splitPlayerId);
  this._paySplitCostForSplitPlayer(s_splitPlayerId);
  
  var s_turnPlayerId = this._getTurnPlayerId();
  this._moveCardFromPlayerToPlayer(s_turnPlayerId, s_splitPlayerId);
  
  var SHOULD_MOVE_CARDS = false;
  this._dealCardTo(s_turnPlayerId, SHOULD_MOVE_CARDS);
  
  SHOULD_MOVE_CARDS = true;
  this._dealCardTo(s_splitPlayerId, SHOULD_MOVE_CARDS);
  
  this._playSound(["snd_split1", "snd_split2"]);
};

//-------------------------------------------------------------------------------------------
//_beginTurnPlayerStand
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginTurnPlayerStand = function() {
  this._setNextTurnPlayer();
  this._playSound("snd_stand");
};

//-------------------------------------------------------------------------------------------
//_beginTurnPlayerSurrender
//-------------------------------------------------------------------------------------------
GamePlay.prototype._beginTurnPlayerSurrender = function() {
  var playerHandData = this._getTurnPlayerHandData();
  this._presentPlayerSurrender(playerHandData);
  
  var f_stopCallback = function() {
    this._setNextTurnPlayer();
  };
  
  if (this._playSound(["snd_surrender1", "snd_surrender2"], f_stopCallback)) {
    this._hideTurnPlayerIndicator();
    this._gamePlayUi.setGameButtonsVisible(false);
  } else {
    this._setNextTurnPlayer();
  }
};

//-------------------------------------------------------------------------------------------
//_calcWinAmount
//-------------------------------------------------------------------------------------------
GamePlay.prototype._calcWinAmount = function(n_betValue, n_winRatio) {
  return(n_betValue + n_betValue * n_winRatio);
};

//-------------------------------------------------------------------------------------------
//_canAffordDouble
//-------------------------------------------------------------------------------------------
GamePlay.prototype._canAffordDouble = function(playerHandData) {
  return(this._playerData.credits >= playerHandData.betValue);
};

//-------------------------------------------------------------------------------------------
//_canAffordOpeningBet
//-------------------------------------------------------------------------------------------
GamePlay.prototype._canAffordOpeningBet = function() {
  var IS_NON_SPLIT_PLAYERS_ONLY = true;
  var n_totalBet = this._playerData.getTotalBet(IS_NON_SPLIT_PLAYERS_ONLY);
  var n_credits = this._playerData.credits;
  return(n_totalBet <= n_credits);
};

//-------------------------------------------------------------------------------------------
//_canAffordSplit
//-------------------------------------------------------------------------------------------
GamePlay.prototype._canAffordSplit = function(playerHandData) {
  return(this._playerData.credits >= playerHandData.betValue);
};

//-------------------------------------------------------------------------------------------
//_canPlayWinSound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._canPlayWinSound = function() {
  return(!this._isPlayerBjSoundPlaying);
};

//-------------------------------------------------------------------------------------------
//_compareCards
//-------------------------------------------------------------------------------------------
GamePlay.prototype._compareCards = function() {
  var i_dealerScore = this._dealerData.score;
  
  var a_playerHands = this._getActivePlayerHands();
  for (var i_index = 0; i_index < a_playerHands.length; i_index++) {
    var playerHandData = a_playerHands[i_index];
    if (!this._isPlayingVsDealer(playerHandData)) {
      continue;
    }
    
    if (i_dealerScore < playerHandData.score) {
      this._presentPlayerWon(playerHandData);
    } else if (i_dealerScore == playerHandData.score) {
      this._presentPlayerPush(playerHandData);
    } else {
      this._presentPlayerLost(playerHandData);
    }
  }
};

//-------------------------------------------------------------------------------------------
//_dealCardTo
//-------------------------------------------------------------------------------------------
GamePlay.prototype._dealCardTo = function(s_playerHandId, b_shouldMoveCards, b_isDealerCardFaceUp) {
  if (this._isDealerId(s_playerHandId)) {
    this._dealCardToDealer(b_isDealerCardFaceUp);
  } else if (this._isPlayerId(s_playerHandId)) {
    this._dealCardToPlayer(s_playerHandId);
  } else {
    console.log("GamePlay._dealCardTo. Warning: Invalid player id: " + s_playerHandId);
    return;
  }
  
  if (b_shouldMoveCards) {
    this._beginMoveCards(Thunderjack.DesignData.CARD_DEAL_DURATION_SECS, Thunderjack.DesignData.CARD_DEAL_RATE_SECS);
  }
};

//-------------------------------------------------------------------------------------------
//_dealCardToDealer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._dealCardToDealer = function(b_isCardFaceUp) {
  this._gamePlayUi.dealCardTo(Thunderjack.PlayerHandIds.DEALER, b_isCardFaceUp);
};

//-------------------------------------------------------------------------------------------
//_dealCardToPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._dealCardToPlayer = function(s_playerHandId) {
  var IS_CARD_FACE_UP = true;
  this._gamePlayUi.dealCardTo(s_playerHandId, IS_CARD_FACE_UP);
};

//-------------------------------------------------------------------------------------------
//_dealDoubleDownCardToTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._dealDoubleDownCardToTurnPlayer = function() {
  this._gameState = Thunderjack.GameStates.DOUBLE_DOWN;
  var SHOULD_MOVE_CARDS = true;
  this._dealCardTo(this._getTurnPlayerId(), SHOULD_MOVE_CARDS);
};

//-------------------------------------------------------------------------------------------
//_dealOpeningCards
//-------------------------------------------------------------------------------------------
GamePlay.prototype._dealOpeningCards = function() {
  this._gameState = Thunderjack.GameStates.DEAL_OPENING_CARDS;
  
  this._aceUpSleeve();
  
  var NUM_CARDS_DEALT = 2;
  this._turnPlayerIds = this._getInitialTurnPlayerIds();
  for (var i_cardDealtRound = 0; i_cardDealtRound < NUM_CARDS_DEALT; i_cardDealtRound++) {
    for (var i_turnPlayerIndex = 0; i_turnPlayerIndex < this._turnPlayerIds.length; i_turnPlayerIndex++) {
      var s_targetPlayerId = this._getTurnPlayerIdAt(i_turnPlayerIndex);
      var SHOULD_MOVE_CARDS = false;
      var b_isCardFaceUp = undefined;
      if (this._isDealerId(s_targetPlayerId)) {
        b_isCardFaceUp = i_cardDealtRound == 0; 
      }
      this._dealCardTo(s_targetPlayerId, SHOULD_MOVE_CARDS, b_isCardFaceUp);
    }
  }
  
  this._beginMoveCards(Thunderjack.DesignData.CARD_DEAL_DURATION_SECS, Thunderjack.DesignData.CARD_DEAL_RATE_SECS);
};

//-------------------------------------------------------------------------------------------
//_didPlayerWinMoreCredits
//-------------------------------------------------------------------------------------------
GamePlay.prototype._didPlayerWinMoreCredits = function() {
  return(this._playerData.credits > this._startingCredits);
};

//-------------------------------------------------------------------------------------------
//_didTurnPlayerBust
//-------------------------------------------------------------------------------------------
GamePlay.prototype._didTurnPlayerBust = function() {
  var handData = this._getTurnPlayerHandData();
  return(handData.score > Thunderjack.DesignData.BLACKJACK_POINTS);
};

//-------------------------------------------------------------------------------------------
//_discardPlayerCards
//-------------------------------------------------------------------------------------------
GamePlay.prototype._discardPlayerCards = function(s_playerId) {
  var handData = this.getPlayerOrDealerHand(s_playerId);
  var i_numCards = handData.getNumCards();
  for (var i_index = 0; i_index < i_numCards; i_index++) {
    this._gamePlayUi.discardCard(s_playerId);
  }
};

//-------------------------------------------------------------------------------------------
//_doesTurnPlayerHaveBlitz
//-------------------------------------------------------------------------------------------
GamePlay.prototype._doesTurnPlayerHaveBlitz = function() {
  var cardMatcher = new Thunderjack.CardMatcher();
  var handData = this._getTurnPlayerHandData();
  return(cardMatcher.hasBlitz(handData));
};

//-------------------------------------------------------------------------------------------
//_endRound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._endRound = function() {
  this._gameState = Thunderjack.GameStates.END_ROUND;
  
  if (this._dealerData.isBust) {
    this._presentPlayersWinViaDealerBust();
  } else {
    this._compareCards();
  }
  
  this._addTotalWonToCredits();
  this._gamePlayUi.setAllBetUisVisible(true);  
  this._presentEndRoundEffects();
  this._updateBetButton();
};

//-------------------------------------------------------------------------------------------
//_getActivePlayerHands
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getActivePlayerHands = function() {
  var a_playerHands = [];
  
  for (var i_index = 0; i_index < Thunderjack.PlayerHandIds.ALL_PLAYERS.length; i_index++) {
    var s_playerId = Thunderjack.PlayerHandIds.ALL_PLAYERS[i_index];
    if (!this._isPlayerId(s_playerId) || !this._isActivePlayer(s_playerId)) {
      continue;
    }
    
    var handData = this.getPlayerOrDealerHand(s_playerId);
    if (handData) {
      a_playerHands.push(handData);
    }
  }
  return(a_playerHands);
};

//-------------------------------------------------------------------------------------------
//_getInitialTurnPlayerIds
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getInitialTurnPlayerIds = function() {
  var INITIAL_PLAYER_IDS = [
    Thunderjack.PlayerHandIds.LOWER_RIGHT,
    Thunderjack.PlayerHandIds.LOWER_MIDDLE,
    Thunderjack.PlayerHandIds.LOWER_LEFT
  ];
  
  var as_playerIds = [];
  for (var i_index = 0; i_index < INITIAL_PLAYER_IDS.length; i_index++) {
    var s_targetPlayerId = INITIAL_PLAYER_IDS[i_index];
    if (this._playerData.getBet(s_targetPlayerId)) {
      //only players with a bet are included
      as_playerIds.push(s_targetPlayerId);
    }
  }
  
  //dealer always last
  as_playerIds.push(Thunderjack.PlayerHandIds.DEALER);
  
  return(as_playerIds);
};

//-------------------------------------------------------------------------------------------
//_getNextTurnPlayerIndex
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getNextTurnPlayerIndex = function(i_startIndex) {
  var i_index = typeof(i_startIndex) === 'undefined' ? 0 : i_startIndex;
  while (i_index < this._turnPlayerIds.length) {
    var s_playerId = this._getTurnPlayerIdAt(i_index);
    var handData = this.getPlayerOrDealerHand(s_playerId);
    if (this._isPlayingVsDealer(handData)) {
      return(i_index);
    }
    i_index++;
  }
  
  return(-1);
};

//-------------------------------------------------------------------------------------------
//_getTurnPlayerHandData
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getTurnPlayerHandData = function() {
  var s_currentTurnPlayerId = this._getTurnPlayerId();
  return(this.getPlayerOrDealerHand(s_currentTurnPlayerId));
};

//-------------------------------------------------------------------------------------------
//_getTurnPlayerId
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getTurnPlayerId = function() {
  return(this._getTurnPlayerIdAt(this._turnPlayerIndex));
};

//-------------------------------------------------------------------------------------------
//_getTurnPlayerIdAt
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getTurnPlayerIdAt = function(i_index) {
  return(this._turnPlayerIds[i_index]);
};

//-------------------------------------------------------------------------------------------
//_getUpperPlayerIdOf
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getUpperPlayerIdOf = function(s_lowerPlayerId) {
  switch (s_lowerPlayerId) {
    case Thunderjack.PlayerHandIds.LOWER_RIGHT:
      return(Thunderjack.PlayerHandIds.UPPER_RIGHT);
      
    case Thunderjack.PlayerHandIds.LOWER_MIDDLE:
      return(Thunderjack.PlayerHandIds.UPPER_MIDDLE);
      
    case Thunderjack.PlayerHandIds.LOWER_LEFT:
      return(Thunderjack.PlayerHandIds.UPPER_LEFT);
  }
  
  return(null);
};

//-------------------------------------------------------------------------------------------
//_getWinSoundKey
//-------------------------------------------------------------------------------------------
GamePlay.prototype._getWinSoundKey = function() {
  return(Thunderjack.DesignData.WIN_SOUND_KEYS[this._winSoundIndex]);
};

//-------------------------------------------------------------------------------------------
//_handleDealerBlackjack
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleDealerBlackjack = function(a_bjPlayerHands) {
  var i_index = a_bjPlayerHands.indexOf(this._dealerData);
  if (i_index === -1) {
    return(false);
  }
  
  this._presentDealerBj();
  
  var a_playerHands = a_bjPlayerHands.concat();
  
  //remove dealer so only players are compared
  a_playerHands.splice(i_index, 1);
  
  for (i_index = 0; i_index < a_playerHands.length; i_index++) {
    var playerHand = a_playerHands[i_index];
    if (!playerHand.hasThunderjack) {
      this._presentPlayerPush(playerHand);
    }
  }
  
  return(true);
};

//-------------------------------------------------------------------------------------------
//_handleDealOpeningCardsComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleDealOpeningCardsComplete = function() {
  this._gameState = Thunderjack.GameStates.IDLE;

  var a_playerHands = this._getActivePlayerHands();
  
  var cardMatcher = new Thunderjack.CardMatcher();
  var a_tjPlayerHands = cardMatcher.getPlayerHandsWithThunderjack(a_playerHands);
  
  a_playerHands.push(this._dealerData);
  var a_bjPlayerHands = cardMatcher.getPlayerHandsWithBlackjack(a_playerHands);
  
  this._playerIdOfThunderjack = this._handleThunderjacks(a_tjPlayerHands);
  this._dealerHasBj = this._handleDealerBlackjack(a_bjPlayerHands); 
  if (this._playerIdOfThunderjack || this._dealerHasBj) {
    this._endRound();
  } else {
    this._handlePlayerBlackjacks(a_bjPlayerHands);
    this._setFirstTurnPlayer();
  }
};

//-------------------------------------------------------------------------------------------
//_handleDiscardCardsComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleDiscardCardsComplete = function() {
  if (this._shouldRecycleDeck()) {
    this._recycleDeck();
  } else {
    this._beginRound();
  }
};

//-------------------------------------------------------------------------------------------
//_handleDoubleDownComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleDoubleDownComplete = function() {
  this._gameState = Thunderjack.GameStates.IDLE;
  
  if (this._didTurnPlayerBust()) {
    this._presentTurnPlayerBust();
  } else {
    this._beginTurnPlayerStand();
  }
};

//-------------------------------------------------------------------------------------------
//_handleHitComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleHitComplete = function() {
  this._gameState = Thunderjack.GameStates.IDLE;
  
  if (this._didTurnPlayerBust()) {
    this._presentTurnPlayerBust();
  } else {
    if (this._doesTurnPlayerHaveBlitz()) {
      if (this._isDealerId(this._getTurnPlayerId())) {
        this._presentTurnPlayerBust();
      } else {
        this._presentTurnPlayerBlitz();
      }
    } else {
      this._resumeTurnPlayer();
    }
  }
};

//-------------------------------------------------------------------------------------------
//_handlePlayerBlackjacks
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handlePlayerBlackjacks = function(a_bjPlayerHands) {
  var b_atLeastOneBj = false;
  
  for (var i_index = 0; i_index < a_bjPlayerHands.length; i_index++) {
    var playerHand = a_bjPlayerHands[i_index];
    if (!(playerHand.hasThunderjack || playerHand.isPush)) {
      b_atLeastOneBj = true;
      this._presentPlayerBj(playerHand);
    }
  }
  
  if (b_atLeastOneBj) {
    var f_stopCallback = function(sound, marker) {
      this._isPlayerBjSoundPlaying = false;
    };
    
    this._isPlayerBjSoundPlaying = this._playAutoWinSound(f_stopCallback);
  }
};

//-------------------------------------------------------------------------------------------
//_handleRecycleDeckComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleRecycleDeckComplete = function() {
  this._presentDeckShuffle();
};

//-------------------------------------------------------------------------------------------
//_handleSplitComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleSplitComplete = function() {
  this._gameState = Thunderjack.GameStates.IDLE;
  if (this._wereAcesSplitOnTurnPlayer()) {
    this._beginTurnPlayerStand();
    this._beginTurnPlayerStand();
  } else {
    this._resumeTurnPlayer();
  }
};

//-------------------------------------------------------------------------------------------
//_handleThunderjacks
//-------------------------------------------------------------------------------------------
GamePlay.prototype._handleThunderjacks = function(a_tjPlayerHands) {
  var i_numHands = a_tjPlayerHands.length;
  if (i_numHands === 0) {
    return(null);
  }
  
  var b_isPush = i_numHands > 1;
  var playerIdOfThunderjack = null;
  
  for (var i_index = 0; i_index < i_numHands; i_index++) {
    var playerHand = a_tjPlayerHands[i_index];
    if (b_isPush) {
      this._presentPlayerPush(playerHand);
    } else {
      playerIdOfThunderjack = playerHand.handId;
      this._presentPlayerTj(playerHand);
    }
  }
  
  return(playerIdOfThunderjack);
};

//-------------------------------------------------------------------------------------------
//_hasPlacedAnOpeningBet
//-------------------------------------------------------------------------------------------
GamePlay.prototype._hasPlacedAnOpeningBet = function() {
  var IS_NON_SPLIT_PLAYERS_ONLY = true;
  return(this._playerData.getTotalBet(IS_NON_SPLIT_PLAYERS_ONLY) > 0);
};

//-------------------------------------------------------------------------------------------
//_hideTurnPlayerIndicator
//-------------------------------------------------------------------------------------------
GamePlay.prototype._hideTurnPlayerIndicator = function() {
  var s_playerId = this._getTurnPlayerId();
  if (this._isPlayerId(s_playerId)) {
    var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
    playerHandUi.setTurnIndicatorVisible(false);
  }
};

//-------------------------------------------------------------------------------------------
// _init
//-------------------------------------------------------------------------------------------
GamePlay.prototype._init = function() {
  Thunderjack.HandPlayerIdMaps.Init();
  
  this._playerData = new Thunderjack.PlayerData();
  this._dealerData = new Thunderjack.HandData(Thunderjack.PlayerHandIds.DEALER);
  
  this._deckData = new Thunderjack.DeckData(Thunderjack.DesignData.NUM_DECKS);
  this._deckData.shuffle();
  
  this._discardDeckData = new Thunderjack.DeckData();
  
  this._gamePlayUi = null;
  this._turnPlayerIds = [];
  this._turnPlayerIndex = 0;
  this._gameState = Thunderjack.GameStates.IDLE;
  
  this._initGamePlayUi();
  this._setCredits(Thunderjack.DesignData.PLAYER_STARTING_CREDITS);
  this._updateTotalBet();
  this._updateBetButton();
  
  this._startingCredits = 0;
  this._totalWon = 0;
  this._totalWonToDisplay = 0;
  
  this._playerIdOfThunderjack = null;
  
  this._dealerHasBj = false; 
  this._isPlayerBjSoundPlaying = false;
  this._shouldDealerRevealCard = false;
  
  this._winSoundIndex = 0;
};

//-------------------------------------------------------------------------------------------
//_initGamePlayUi
//-------------------------------------------------------------------------------------------
GamePlay.prototype._initGamePlayUi = function() {
  this._gamePlayUi = new Thunderjack.GamePlayUi(this);
  this._gamePlayUi.cardsMoverStartSignal.add(this._onCardsMoverStart, this);
  this._gamePlayUi.cardsMoverCompleteSignal.add(this._onCardsMoverComplete, this);
  this._gamePlayUi.hideAmountWon();
  this._gamePlayUi.setGameButtonsVisible(false);
};

//-------------------------------------------------------------------------------------------
//_insertUpperPlayerIdIntoTurnPlayerIds
//-------------------------------------------------------------------------------------------
GamePlay.prototype._insertUpperPlayerIdIntoTurnPlayerIds = function(a_tjPlayerHands) {
  var s_turnPlayerId = this._getTurnPlayerId();
  var i_indexOfTurnPlayerId = this._turnPlayerIds.indexOf(s_turnPlayerId);
  var s_upperPlayerId = this._getUpperPlayerIdOf(s_turnPlayerId);
  this._turnPlayerIds.splice(i_indexOfTurnPlayerId + 1, 0, s_upperPlayerId);
  return(s_upperPlayerId);
};

//-------------------------------------------------------------------------------------------
//_isActivePlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isActivePlayer = function(s_playerId) {
  var playerData = this.getPlayerOrDealerHand(s_playerId);
  return(playerData && playerData.betValue > 0);
};

//-------------------------------------------------------------------------------------------
//_isDealerId
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isDealerId = function(s_playerId) {
  return(s_playerId === Thunderjack.PlayerHandIds.DEALER);
};

//-------------------------------------------------------------------------------------------
//_isDoubleEligible
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isDoubleEligible = function(cardMatcher, playerHandData) {
return(cardMatcher.isDoubleEligible(playerHandData) &&
    this._canAffordDouble(playerHandData));
};

//-------------------------------------------------------------------------------------------
//_isPlayerId
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isPlayerId = function(s_playerId) {
  return(Thunderjack.PlayerHandIds.ALL_PLAYERS.indexOf(s_playerId) > -1);
};

//-------------------------------------------------------------------------------------------
//_isPlayingVsDealer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isPlayingVsDealer = function(playerHandData) {
  return(!(playerHandData.hasBlackjack ||
    playerHandData.hasThunderjack ||
    playerHandData.isBust ||
    playerHandData.isPush ||
    playerHandData.hasBlitz ||
    playerHandData.hasSurrendered));
};

//-------------------------------------------------------------------------------------------
//_isSplitEligible
//-------------------------------------------------------------------------------------------
GamePlay.prototype._isSplitEligible = function(cardMatcher, playerHandData) {
  return(cardMatcher.isSplitEligible(playerHandData) &&
      this._canAffordSplit(playerHandData));
};

//-------------------------------------------------------------------------------------------
//_moveCardFromPlayerToPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._moveCardFromPlayerToPlayer = function(s_turnPlayerId, s_splitPlayerId) {
  this._gamePlayUi.moveCardFromTo(s_turnPlayerId, s_splitPlayerId);
};

//-------------------------------------------------------------------------------------------
//_moveCardsToDiscardDeck
//-------------------------------------------------------------------------------------------
GamePlay.prototype._moveCardsToDiscardDeck = function() {
  if (this._gameState !== Thunderjack.GameStates.END_ROUND) {
    return(false);
  }
  
  this._gameState = Thunderjack.GameStates.DISCARD_CARDS;
  
  for (var i_index = 0; i_index < this._turnPlayerIds.length; i_index++) {
    this._discardPlayerCards(this._getTurnPlayerIdAt(i_index));
  }
  
  this._beginMoveCards(
    Thunderjack.DesignData.CARD_DISCARD_RECYCLE_DURATION_SECS,
    Thunderjack.DesignData.CARD_DISCARD_RECYCLE_RATE_SECS);
  
  return(true);
};

//-------------------------------------------------------------------------------------------
//_onBetButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onBetButtonPressed = function() {
  this._startingCredits = this._playerData.credits;
  this._payRoundCost();
  this._gamePlayUi.setAllBetUisVisible(false);
  this._gamePlayUi.hideAmountWon();
  this._resetPlayers();
  
  if (!this._moveCardsToDiscardDeck()) {
    this._beginRound();
  }
};

//-------------------------------------------------------------------------------------------
//_onCardsMoverComplete
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onCardsMoverComplete = function(cardUi, cardMoveData) {
  this._updatePlayersScores();
  
  switch (this._gameState) {
    case Thunderjack.GameStates.DEAL_OPENING_CARDS:
      this._handleDealOpeningCardsComplete();
      break;
      
    case Thunderjack.GameStates.DISCARD_CARDS:
      this._handleDiscardCardsComplete();
      break;
      
    case Thunderjack.GameStates.DOUBLE_DOWN:
      this._handleDoubleDownComplete();
      break;
      
    case Thunderjack.GameStates.HIT:
      this._handleHitComplete();
      break;
      
    case Thunderjack.GameStates.RECYCLE_DECK:
      this._handleRecycleDeckComplete();
      break;
      
    case Thunderjack.GameStates.SPLIT:
      this._handleSplitComplete();
      break;
  }
};

//-------------------------------------------------------------------------------------------
//_onCardsMoverStart
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onCardsMoverStart = function(cardUi, cardMoveData) {
  var b_shouldPlayDealSound = false;
  
  switch (this._gameState) {
    case Thunderjack.GameStates.DISCARD_CARDS:
    case Thunderjack.GameStates.RECYCLE_DECK:
      break;
      
    case Thunderjack.GameStates.SPLIT:
      if (cardMoveData.sourcePlayerId === Thunderjack.PlayerHandIds.DECK) {
        b_shouldPlayDealSound = true;
      }
      break;
      
    default:
      b_shouldPlayDealSound = true;
  }
  
  if (b_shouldPlayDealSound) {
    this._playSound(["snd_card_deal0", "snd_card_deal1", "snd_card_deal2"]);
  }
};

//-------------------------------------------------------------------------------------------
//_onClearButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onClearButtonPressed = function() {
  this._playSound("snd_bet_remove");
  
  this._playerData.clearAllBets();
  
  var IS_OFFSET = false;
  for (var i_index = 0; i_index < Thunderjack.PlayerHandIds.ALL_PLAYERS.length; i_index++) {
    var s_playerId = Thunderjack.PlayerHandIds.ALL_PLAYERS[i_index];
    var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
    playerHandUi.setBetValue(this._playerData.getBet(s_playerId, IS_OFFSET));
  }
  
  this._updateTotalBet();
  this._updateBetButton();
};

//-------------------------------------------------------------------------------------------
//_onDoubleButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onDoubleButtonPressed = function() {
  this._beginTurnPlayerDoubleDown();
};

//-------------------------------------------------------------------------------------------
//_onHitButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onHitButtonPressed = function() {
  this._beginTurnPlayerHit();
};

//-------------------------------------------------------------------------------------------
//_onSplitButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onSplitButtonPressed = function() {
  this._beginTurnPlayerSplit();
};

//-------------------------------------------------------------------------------------------
//_onStandButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onStandButtonPressed = function() {
  this._beginTurnPlayerStand();
};

//-------------------------------------------------------------------------------------------
//_onSurrenderButtonPressed
//-------------------------------------------------------------------------------------------
GamePlay.prototype._onSurrenderButtonPressed = function() {
  this._beginTurnPlayerSurrender();
};

//-------------------------------------------------------------------------------------------
//_payDoubleDownCostForTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._payDoubleDownCostForTurnPlayer = function() {
  var playerHandData = this._getTurnPlayerHandData();
  
  var i_cost = playerHandData.betValue;
  var IS_OFFSET = true;
  this._setCredits(-i_cost, IS_OFFSET);
  
  this._updatePlayerBetValueUi(this._getTurnPlayerId());
  this._updateTotalBet();
};

//-------------------------------------------------------------------------------------------
//_paySplitCostForSplitPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._paySplitCostForSplitPlayer = function(s_splitPlayerId) {
  var playerHandData = this.getPlayerOrDealerHand(s_splitPlayerId);
  
  var i_cost = playerHandData.betValue;
  var IS_OFFSET = true;
  this._setCredits(-i_cost, IS_OFFSET);
  
  this._updatePlayerBetValueUi(s_splitPlayerId);
  this._updateTotalBet();
};

//-------------------------------------------------------------------------------------------
//_payRoundCost
//-------------------------------------------------------------------------------------------
GamePlay.prototype._payRoundCost = function(s_playerId) {
  var IS_NON_SPLIT_PLAYERS_ONLY = true;
  var i_totalBet = this._playerData.getTotalBet(IS_NON_SPLIT_PLAYERS_ONLY);
  this._updateTotalBet(IS_NON_SPLIT_PLAYERS_ONLY);
  
  var IS_OFFSET = true;
  this._setCredits(-i_totalBet, IS_OFFSET);
};

//-------------------------------------------------------------------------------------------
//_playAutoWinSound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._playAutoWinSound = function(f_stopCallback) {
  return(this._playSound([ "snd_auto_win1", "snd_auto_win2", "snd_auto_win3", "snd_auto_win4" ], f_stopCallback));
};

//-------------------------------------------------------------------------------------------
//_playSound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._playSound = function(soundKeyOrArrayOfKeys, f_stopCallback) {
  var s_key = undefined;
  
  if (typeof(soundKeyOrArrayOfKeys) === "string") {
    s_key = soundKeyOrArrayOfKeys;
  } else if (Array.isArray(soundKeyOrArrayOfKeys)) {
    var hopefullyASoundKeyOrArrayOfKeys = Phaser.ArrayUtils.getRandomItem(soundKeyOrArrayOfKeys);
    return(this._playSound(hopefullyASoundKeyOrArrayOfKeys, f_stopCallback));
  } else {
    return(null);
  }
  
  var sound = this.game.sound.play(s_key);
  if (!sound) {
    return(null);
  }
  
  if (f_stopCallback) {
    sound.onStop.addOnce(f_stopCallback, this);
  }
  
  return(sound);
};

//-------------------------------------------------------------------------------------------
//_playWinSound
//-------------------------------------------------------------------------------------------
GamePlay.prototype._playWinSound = function() {
  if (!this._canPlayWinSound()) {
    return;
  }
  
  var s_winSoundKey = this._getWinSoundKey();
  this._playSound(s_winSoundKey);
  this._advanceWinSoundIndex();
};

//-------------------------------------------------------------------------------------------
//_presentDealerBj
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentDealerBj = function() {
  this._dealerData.hasBlackjack = true;
  var dealerHandUi = this._gamePlayUi.dealerHand;
  dealerHandUi.showResultsLabel(Thunderjack.ResultLabelFrames.DEALER_BLACKJACK);
};

//-------------------------------------------------------------------------------------------
//_presentDeckShuffle
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentDeckShuffle = function() {
  this._deckData.shuffle();
  
  var f_stopCallback = function() {
    this._beginRound();
  };
  
  if (!this._playSound(["snd_card_shuffle0", "snd_card_shuffle1"], f_stopCallback)) {
    this._beginRound();
  }
};

//-------------------------------------------------------------------------------------------
//_presentEndRoundEffects
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentEndRoundEffects = function() {
  if (this._playerIdOfThunderjack) {
    this._presentTjEffect();
  } else if (this._didPlayerWinMoreCredits()) {
    this._playWinSound();
  } else if (this._dealerHasBj) {
    this._playSound("snd_dealer_bj");
  } 
};

//-------------------------------------------------------------------------------------------
//_presentTjEffect
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentTjEffect = function() {
  this._playSound("snd_thunderjack");
  new Thunderjack.TjVfxFlash(this.game);
  new Thunderjack.TjVfxBolt(this.game, this._gamePlayUi.thunderBoltsByPlayerId[this._playerIdOfThunderjack]);
  new Thunderjack.TjVfxTremor(this.game);
};

//-------------------------------------------------------------------------------------------
//_presentPlayerBj
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerBj = function(playerHandData) {
  playerHandData.hasBlackjack = true;
  
  var n_amountWon = this._calcWinAmount(playerHandData.betValue, Thunderjack.DesignData.WIN_RATIO_BLACKJACK);
  this._totalWonToDisplay += n_amountWon;
  
  var IS_OFFSET = true;
  this._setCredits(n_amountWon, IS_OFFSET);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showAnimationLabel(Thunderjack.ResultLabelFrames.BLACKJACK);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
};

//-------------------------------------------------------------------------------------------
//_presentPlayerLost
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerLost = function(playerHandData) {
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.setBetValue(0);
};

//-------------------------------------------------------------------------------------------
//_presentPlayerPush
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerPush = function(playerHandData) {
  playerHandData.isPush = true;
  
  var n_amountWon = playerHandData.betValue;
  this._totalWon += n_amountWon;
  this._totalWonToDisplay += n_amountWon;
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showResultsLabel(Thunderjack.ResultLabelFrames.PUSH);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
};

//-------------------------------------------------------------------------------------------
//_presentPlayersWinViaDealerBust
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayersWinViaDealerBust = function() {
  var a_playerHands = this._getActivePlayerHands();
  
  for (var i_index = 0; i_index < a_playerHands.length; i_index++) {
    var playerHandData = a_playerHands[i_index];
    if (this._isPlayingVsDealer(playerHandData)) {
      this._presentPlayerWon(playerHandData);
    }
  }
};

//-------------------------------------------------------------------------------------------
//_presentPlayerSurrender
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerSurrender = function(playerHandData) {
  playerHandData.hasSurrendered = true;
  
  var n_amountWon = this._calcWinAmount(playerHandData.betValue, Thunderjack.DesignData.WIN_RATIO_SURRENDER);
  this._totalWonToDisplay += n_amountWon;
  
  var IS_OFFSET = true;
  this._setCredits(n_amountWon, IS_OFFSET);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showResultsLabel(Thunderjack.ResultLabelFrames.SURRENDER);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
};

//-------------------------------------------------------------------------------------------
//_presentPlayerTj
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerTj = function(playerHandData) {
  playerHandData.hasThunderjack = true;
  
  var n_amountWon = this._calcWinAmount(playerHandData.betValue, Thunderjack.DesignData.WIN_RATIO_THUNDERJACK);
  this._totalWonToDisplay += n_amountWon;
  
  var IS_OFFSET = true;
  this._setCredits(n_amountWon, IS_OFFSET);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showAnimationLabel(Thunderjack.ResultLabelFrames.THUNDERJACK);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
};

//-------------------------------------------------------------------------------------------
//_presentPlayerWon
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentPlayerWon = function(playerHandData) {
  var n_betValue = playerHandData.betValue;
  var n_amountWon = this._calcWinAmount(n_betValue, Thunderjack.DesignData.WIN_RATIO_WIN); 
  
  if (playerHandData.hasDoubled) {
    n_amountWon *= 2;
  }
  
  this._totalWon += n_amountWon;
  this._totalWonToDisplay += n_amountWon;
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showResultsLabel(Thunderjack.ResultLabelFrames.WIN);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
};

//-------------------------------------------------------------------------------------------
//_presentTurnPlayerBlitz
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentTurnPlayerBlitz = function() {
  this._isPlayerBjSoundPlaying = this._playAutoWinSound();
  
  var playerHandData = this._getTurnPlayerHandData();
  playerHandData.isBlitz = true;
  
  var n_amountWon = this._calcWinAmount(playerHandData.betValue, Thunderjack.DesignData.WIN_RATIO_BLITZ);
  this._totalWonToDisplay += n_amountWon;
  
  var IS_OFFSET = true;
  this._setCredits(n_amountWon, IS_OFFSET);
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  playerHandUi.showAnimationLabel(Thunderjack.ResultLabelFrames.BLITZ);
  playerHandUi.showAmountWon(n_amountWon);
  playerHandUi.setBetValue(n_amountWon);
  
  this._setNextTurnPlayer();
};

//-------------------------------------------------------------------------------------------
//_presentTurnPlayerBust
//-------------------------------------------------------------------------------------------
GamePlay.prototype._presentTurnPlayerBust = function() {
  var playerHandData = this._getTurnPlayerHandData();
  playerHandData.isBust = true;
  
  var s_playerId = playerHandData.handId;
  var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
  playerHandUi.showResultsLabel(Thunderjack.ResultLabelFrames.BUST);
  
  if (this._isPlayerId(s_playerId)) {
    playerHandUi.setBetValue(0);
    this._playSound("snd_bust");
  } else {
    var f_stopCallback = function(sound, marker) {
      this._setNextTurnPlayer();
    };
    
    if (this._playSound([ "snd_dealer_bust1", "snd_dealer_bust2" ], f_stopCallback)) {
      return;
    }
  }
  
  this._setNextTurnPlayer();
};

//-------------------------------------------------------------------------------------------
//_recycleDeck
//-------------------------------------------------------------------------------------------
GamePlay.prototype._recycleDeck = function() {
  this._gameState = Thunderjack.GameStates.RECYCLE_DECK;
  
  var i_numCardsInDiscardDeck = this._discardDeckData.getLength();
  while (i_numCardsInDiscardDeck-- > 0) {
    this._gamePlayUi.recycleCard();
  } 
  
  this._beginMoveCards(
    Thunderjack.DesignData.CARD_DISCARD_RECYCLE_DURATION_SECS,
    Thunderjack.DesignData.CARD_DISCARD_RECYCLE_RATE_SECS);
};

//-------------------------------------------------------------------------------------------
//_resetPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._resetPlayer = function(s_playerId) {
  var playerHandData = this.getPlayerOrDealerHand(s_playerId);
  playerHandData.reset();
  
  var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
  playerHandUi.hideResultsLabel();
  playerHandUi.setScore(0);
  
  if (this._isPlayerId(s_playerId)) {
    this._updatePlayerBetValueUi(s_playerId);
    playerHandUi.hideAmountWon();
  }
};

//-------------------------------------------------------------------------------------------
//_resetPlayers
//-------------------------------------------------------------------------------------------
GamePlay.prototype._resetPlayers = function() {
  for (var i_index = 0; i_index < this._turnPlayerIds.length; i_index++) {
    var s_playerId = this._getTurnPlayerIdAt(i_index);
    if (Thunderjack.PlayerHandIds.IsUpperPlayerId(s_playerId)) {
      this._resetSplitPlayer(s_playerId);
    } else {
      this._resetPlayer(s_playerId);
    }
  }
};

//-------------------------------------------------------------------------------------------
//_resetSplitPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._resetSplitPlayer = function(s_playerId) {
  var playerHandData = this.getPlayerOrDealerHand(s_playerId);
  playerHandData.betValue = 0;
  this._resetPlayer(s_playerId);
};

//-------------------------------------------------------------------------------------------
//_resumeTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._resumeTurnPlayer = function() {
  this._setTurnPlayer(this._turnPlayerIndex);
};

//-------------------------------------------------------------------------------------------
//_revealDealersSecondCard
//-------------------------------------------------------------------------------------------
GamePlay.prototype._revealDealersSecondCard = function() {
  var cardData = this._dealerData.getCardAt(1);
  var cardUi = this._gamePlayUi.getCardUi(cardData);
  cardUi.isFaceUp(true);
};

//-------------------------------------------------------------------------------------------
//_setCredits
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setCredits = function(i_credits, b_isOffset) {
  var i_playerCredits = this._playerData.setCredits(i_credits, b_isOffset);
  this._gamePlayUi.setCredits(i_playerCredits);
};

//-------------------------------------------------------------------------------------------
//_setFirstTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setFirstTurnPlayer = function() {
  var i_turnPlayerIndex = this._getNextTurnPlayerIndex(0);
  if (!this._setTurnPlayer(i_turnPlayerIndex)) {
    this._endRound();
  }
};

//-------------------------------------------------------------------------------------------
//_setNextTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setNextTurnPlayer = function() {
  var i_nextTurnPlayerIndex = this._getNextTurnPlayerIndex(this._turnPlayerIndex + 1);
  if (!this._setTurnPlayer(i_nextTurnPlayerIndex)) {
    this._endRound();
  }
};

//-------------------------------------------------------------------------------------------
//_setSplitStatusForPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setSplitStatusForPlayers = function(s_splitPlayerId) {
  var turnPlayerHandData = this._getTurnPlayerHandData();
  turnPlayerHandData.hasSplit = true;
  this._updateAcesSplitStatusOnTurnPlayer();
  
  var splitPlayerHandData = this.getPlayerOrDealerHand(s_splitPlayerId);
  splitPlayerHandData.hasSplit = true;
  splitPlayerHandData.betValue = turnPlayerHandData.betValue;
};

//-------------------------------------------------------------------------------------------
//_setTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setTurnPlayer = function(i_turnPlayerIndex) {
  this._hideTurnPlayerIndicator();
  this._gamePlayUi.setGameButtonsVisible(false);
  
  this._turnPlayerIndex = i_turnPlayerIndex;
  var s_playerId = this._getTurnPlayerId();
  if (!s_playerId) {
    //no turn player to set 
    return(false);
  }
  
  if (this._isDealerId(s_playerId)) {
    this._beginDealerTurn();
  } else {
    this._beginPlayerTurn(s_playerId);
  }
  
  return(true);
};

//-------------------------------------------------------------------------------------------
//_setTurnPlayerDoubleDownStatus
//-------------------------------------------------------------------------------------------
GamePlay.prototype._setTurnPlayerDoubleDownStatus = function() {
  this._getTurnPlayerHandData().hasDoubled = true;
};

//-------------------------------------------------------------------------------------------
//_shouldRecycleDeck
//-------------------------------------------------------------------------------------------
GamePlay.prototype._shouldRecycleDeck = function() {
  if (this._discardDeckData.getLength() === 0) {
    //shouldn't recycle deck if no cards have been discarded
    return(false);
  }
  
  var n_percentageOfCardsInDeck = this._deckData.getLength() / this.getTotalNumCards();
  return(n_percentageOfCardsInDeck < Thunderjack.DesignData.RECYCLE_DECK_RATIO);
};

//-------------------------------------------------------------------------------------------
//_showGameButtonsForPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._showGameButtonsForPlayer = function(playerHandData) {
  var cardMatcher = new Thunderjack.CardMatcher();
  
  this._gamePlayUi.setGameButtonsVisible(true);
  this._gamePlayUi.setDoubleButtonVisible(this._isDoubleEligible(cardMatcher, playerHandData));
  this._gamePlayUi.setSplitButtonVisible(this._isSplitEligible(cardMatcher, playerHandData));
  this._gamePlayUi.setSurrenderButtonVisible(cardMatcher.isSurrenderEligible(playerHandData));
};

//-------------------------------------------------------------------------------------------
//_shouldDealerStand
//-------------------------------------------------------------------------------------------
GamePlay.prototype._shouldDealerStand = function() {
return(this._dealerData.score >= Thunderjack.DesignData.DEALER_HIT_THRESHOLD);
};

//-------------------------------------------------------------------------------------------
//_updateAcesSplitStatusOnTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updateAcesSplitStatusOnTurnPlayer = function() {
  var handData = this._getTurnPlayerHandData();
  var cardMatcher = new Thunderjack.CardMatcher();
  handData.wereAcesSplit = cardMatcher.hasPairOf(handData, Thunderjack.CardValues.ACE);
};

//-------------------------------------------------------------------------------------------
//_updateBetButton
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updateBetButton = function() {
  var b_enableBetButton = this._hasPlacedAnOpeningBet() && this._canAffordOpeningBet(); 
  this._gamePlayUi.setBetButtonEnabled(b_enableBetButton);
};

//-------------------------------------------------------------------------------------------
//_updatePlayerBetValueUi
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updatePlayerBetValueUi = function(s_playerId) {
  var playerHandData = this.getPlayerOrDealerHand(s_playerId);
  var i_betValue = playerHandData.betValue;
  if (playerHandData.hasDoubled) {
    i_betValue *= 2;
  }
  
  var playerHandUi = this.getPlayerOrDealerHandUi(s_playerId);
  playerHandUi.setBetValue(i_betValue);
};

//-------------------------------------------------------------------------------------------
//_updatePlayerScore
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updatePlayerScore = function(s_playerHandId) {
  var playerHandData = this.getPlayerOrDealerHand(s_playerHandId);
  if (!playerHandData) {
    return;
  }
  
  var playerHandUi = this.getPlayerOrDealerHandUi(playerHandData.handId);
  var i_points = Thunderjack.CalcScore.Eval(playerHandData.getFaceUpCards());
  if (i_points && playerHandUi) {
    playerHandData.score = i_points;
    playerHandUi.setScore(i_points);
  }
};

//-------------------------------------------------------------------------------------------
//_updatePlayersScores
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updatePlayersScores = function() {
  for (var i_index = 0; i_index < this._turnPlayerIds.length; i_index++) {
    var s_playerId = this._getTurnPlayerIdAt(i_index);
    this._updatePlayerScore(s_playerId);
  }
};

//-------------------------------------------------------------------------------------------
//_updateTotalBet
//-------------------------------------------------------------------------------------------
GamePlay.prototype._updateTotalBet = function(b_shouldGetNonSplitPlayersOnly) {
  var i_totalBet = this._playerData.getTotalBet(b_shouldGetNonSplitPlayersOnly);
  this._gamePlayUi.setBet(i_totalBet);
};

//-------------------------------------------------------------------------------------------
//_wereAcesSplitOnTurnPlayer
//-------------------------------------------------------------------------------------------
GamePlay.prototype._wereAcesSplitOnTurnPlayer = function() {
  return(this._getTurnPlayerHandData().wereAcesSplit);
};